##########################################
# Noch zu ändern:                        #
# In der Übersicht von free-theorems die #
# Listen zu einfachen Elementen abändern #
# (Vereinfachung).                       #
##########################################

FOLIE 1: Titelfolie
Begrüßung
Praktisches Mittel formale Beweise
Herleitung Theoreme bestimmter Art

FOLIE 2: Gliederung
Was sind freie Theoreme?
Die Theorie dahinter
Die Bibliothek free-theorems

FOLIE 3: Was sind freie Theoreme?
Einführung per Beispiel

FOLIE 4: Gib mir eine Signatur...
Haskell: Umfassendes Typsystem
Automatisches Inferieren
Manuelles Festlegen Typsignatur
Signatur sagt viel über Funktion aus
Impliziter Allquantor
Funktion generiert Liste
Auf welche Daten kann Funktion zurückgreifen?
Keine Infos über Listentyp
Werte aus Eingabeliste wiederverwenden

FOLIE 5: Gib mir eine Signatur...
Wie entscheidet Funktion, welche Werte?
Keine Eigenschaften der Elemente für Entscheidung
Nicht mal Gleichheit (weil nicht Eq-Klasse)
Sie kennt: Länge der Liste
Kennt Position der einzelnen Elemente

FOLIE 6: Gib mir eine Signatur...
Beliebige Funktion g

FOLIE 7: Gib mir eine Signatur...
Anwenden von g auf jedes Listenelement, dann f
Für einzelnes Element zeigen

FOLIE 8: Gib mir eine Signatur...
Hier: Zuerst f, dann g auf jedes Listenelement
Da f lediglich Reihenfolge ändert: gleich

FOLIE 9: ...und ich schenke dir ein Theorem
Genau das sagt diese Formel
Keine konkrete Implementierung betrachtet
Theorem "geschenkt", daher "free"
Nur möglich durch Typsystem
Vergleich C Templates

FOLIE 10: Die Theorie dahinter
Bisher: mit Intuition argumentiert
formale Beschreibung möglich
systematische Herleitung --> Programmatisch
NICHT ZU SEHR INS DETAIL

FOLIE 11: Die Theorie dahinter
Typen als Relation
Basistypen --> Identitätsrelationen
Komplexe Typen --> Konstruktion aus Typrelationen

FOLIE 12: Die Theorie dahinter
Theorem (Parametrizität)
Kann man beweisen
Aussage gilt für alle Typen

FOLIE 13: Die Theorie dahinter
Freies Theorem durch schrittweises Abrollen

FOLIE 14: Die Theorie dahinter
Rechts: Konstruierte Relation zu Typ von f
Gesamt: Parametrizität angewandt
"Man würde jetzt anfangen mit  ..."
Ergebnis: Freies Theorem
Systematisch, könnte Programm machen
Programm existiert!

==> free theorems generator zeigen
Beispiel f :: [a] -> [a]
Beispiel fmap :: Functor f => (a -> b) -> f a -> f b
GEHT NICHT!
Genau da fängt meine Arbeit an!

FOLIE 15: Typkonstruktorvariablen
Typklassen mit Typvariable
Also von der Sorte * - >*

FOLIE 16: Typkonstruktorvariablen
Relationale Interpretation: Funktionen auf Relationen
Überführt Typrelation in Relation mit "geliftetem" Typ
Auch das lässt sich algorithmisch lösen

FOLIE 17: Die Bibliothek free-theorems
Bereits angesprochen
Hier ein Überblick: Aufbau, wo ansetzen für Erweiterung?

FOLIE 18: free-theorems


FOLIE 19: Überblick
Kompletten Ablauf erläutern:

	Haskellprogramm		    String
=>	parse =>
    Verinefachter AST       [Declaration]
=>  check =>
    Validierter AST         [ValidDeclaration]
=>  interpret =>
    Relationaldarstellung	Intermediate
=>  asTheorem =>
    Freies Theorem          Formula
=>  Pretty Printer =>
    Freies Theorem			String

Kurz erklären: specialise



------------

* Beispiel am Anfang: Zahlen oder Farben, damit man die Reihenfolge erkennt.
* g :: Int -> Int
* Theorie: Praktische Beispiele (Basistyp, Liste oder so)
* Folie 14: Noch zusätzlich auf Folie schreiben: Allquantifizierung über Typvariable R 
* Folie 16: Parametrizität einmal für fmap

* Was gemacht werden muss (und was noch fehlt)